from __future__ import print_function
import requests
#
base_url = 'https://gateway-a.watsonplatform.net/calls'
#
def get_sentiment_score_from_text(text, apikey):
    params = {
        'text': text,
        'outputMode': 'json',
        'apikey': apikey,
    }
    r = requests.get(base_url+'/text/TextGetTextSentiment', params=params)
    '''
    Example response:

    {
        "status": "OK",
        "usage": "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
        "totalTransactions": "1",
        "language": "english",
        "docSentiment": {
            "score": "0.688812",
            "type": "positive"
        }
    }
    '''
    #
    try:
        return float(r.json()['docSentiment']['score'])
    except:
        raise Exception('Could not parse the sentiment score from the result:\n'+str(r.text))
    #
#
def get_sentiment_score_for_targets_from_text(text, targets, apikey):
    params = {
        'text': text,
        'targets': targets,
        'outputMode': 'json',
        'apikey': apikey,
    }
    r = requests.get(base_url+'/text/TextGetTargetedSentiment', params=params)
    '''
    Example response:

    {
        "status": "OK",
        "usage": "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
        "totalTransactions": "1",
        "language": "english",
        "results": [
            {
                "sentiment": {
                    "type": "neutral"
                },
                "text": "Apple"
            },
            {
                "sentiment": {
                    "score": "-0.81546",
                    "type": "negative"
                },
                "text": "Blackberry"
            }
        ]
    }
    '''
    #
    try:
        results = r.json()['results']
        for x in results:
            if 'score' not in x['sentiment'] and x['sentiment']['type'] == 'neutral':
                x['sentiment']['score'] = 0
            #
            x['sentiment']['score'] = float(x['sentiment']['score'])
        #
        return {x['text']:x['sentiment']['score'] for x in results}
    except:
        raise Exception('Could not parse the sentiment score from the result:\n'+str(r.text))
    #
#
if __name__ == '__main__':
    apikey = '<insert key here>'
    #
    print(get_sentiment_score_from_text('These Images Have Us VERY Excited About The iPhone 7.', apikey))
    print(get_sentiment_score_for_targets_from_text('These Images Have Us VERY Excited About The iPhone 7', 'iphone', apikey))
    print(get_sentiment_score_from_text('Apple is good. Blackberry is bad.', apikey))
    print(get_sentiment_score_for_targets_from_text('Apple is good. Blackberry is bad.', 'Apple|Blackberry', apikey))
    #
    '''
    url = "http://www.zacks.com/stock/news/207968/stock-market-news-for-february-19-2016"
    targets = "NASDAQ|Dow"
    r = requests.get('https://gateway-a.watsonplatform.net/calls/url/URLGetTargetedSentiment?url=%s&targets=%s&outputMode=json&apikey=%s'%(url, targets, apikey))
    print(r.status_code)
    print(r.text)
    print(r.encoding)
    print(r.headers['content-type'])
    print(r.json())
    '''
#
